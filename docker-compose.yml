name: booking_solution

services:

  nuget:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: images/nuget/Dockerfile.nuget
    networks:
      - booking_backend
      - booking_frontend
    #restart: always
    #restart: unless-stopped
    ports:
      - published: 5555
        target: 80
    volumes:
      - nuget_data:/var/baget:rw


  app:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: Application/BookingApi/Dockerfile
    depends_on:
      - admin
      - planning
      - sales
      - support
    domainname: booking.local
    networks:
      - booking_backend
      - booking_frontend
    environment:
      ASPNETCORE_CAPTURESTARTUPERRORS: true
      ASPNETCORE_ENVIRONMENT: Production-App
      PROVIDER_NAME: npgsql
      ConnectionString: Host=db001.booking.local; Database=($$Context); Username=postgres; Password=postgres
 
  demo:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: Application/BookingApi/Dockerfile
    depends_on:
      - db
    domainname: booking.local
    networks:
      - booking_backend
    environment:
      ASPNETCORE_CAPTURESTARTUPERRORS: true
      ASPNETCORE_ENVIRONMENT: Production-Demo
      PROVIDER_NAME: npgsql
      ConnectionString: Host=db001.booking.local; Database=($$Context); Username=postgres; Password=postgres

  admin:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: Application/BookingApi/Dockerfile
    depends_on:
      - db
    domainname: booking.local
    networks:
      - booking_backend
    environment:
      ASPNETCORE_CAPTURESTARTUPERRORS: true
      ASPNETCORE_ENVIRONMENT: Production-Admin
      PROVIDER_NAME: npgsql
      ConnectionString: Host=db001.booking.local; Database=($$Context); Username=postgres; Password=postgres

  planning:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: Application/BookingApi/Dockerfile
    depends_on:
      - db
    domainname: booking.local
    networks:
      - booking_backend
    environment:
      ASPNETCORE_CAPTURESTARTUPERRORS: true
      ASPNETCORE_ENVIRONMENT: Production-Planning
      PROVIDER_NAME: npgsql
      ConnectionString: Host=db001.booking.local; Database=($$Context); Username=postgres; Password=postgres

  sales:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: Application/BookingApi/Dockerfile
    depends_on:
      - db
    domainname: booking.local
    networks:
      - booking_backend
    environment:
      ASPNETCORE_CAPTURESTARTUPERRORS: true
      ASPNETCORE_ENVIRONMENT: Production-Sales
      PROVIDER_NAME: npgsql
      ConnectionString: Host=db001.booking.local; Database=($$Context); Username=postgres; Password=postgres

  support:
    image: ${DOCKER_REGISTRY-}bookingapi:latest
    build:
      context: .
      dockerfile: Application/BookingApi/Dockerfile
    depends_on:
      - db
    domainname: booking.local
    networks:
      - booking_backend
    environment:
      ASPNETCORE_CAPTURESTARTUPERRORS: true
      ASPNETCORE_ENVIRONMENT: Production-Support
      PROVIDER_NAME: npgsql
      ConnectionString: Host=db001.booking.local; Database=($$Context); Username=postgres; Password=postgres



  db:
    image: ${DOCKER_REGISTRY-}postgres:16.3
    command: ["postgres", "-c", "log_statement=none"]
    container_name: booking_db
    domainname: booking.local
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      interval: 3s
      retries: 5
      test: pg_isready -q -h db
      timeout: 5s
    hostname: db001.booking.local
    networks:
      - booking_backend
    ports:
      - published: 7032
        target: 5432
    #restart: on-failure
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data:rw
  
  dbadmin:
    container_name: booking_dbadmin
    build:
      context: .
      dockerfile: images/db-admin/Dockerfile.dbadmin
    depends_on:
      - db
    domainname: booking.local
    healthcheck:
      test: exit 0
    hostname: db901.booking.local
    environment:
      GUNICORN_ACCESS_LOGFILE: /var/log/access.log
      #PGADMIN_CONFIG_SERVER_MODE: 1
      #PGADMIN_DEFAULT_EMAIL: nobili.andrea@gmail.com
      #PGADMIN_DEFAULT_PASSWORD: 123_Stella
    networks:
      - booking_backend
      - booking_frontend
    #ports:
    #  - published: 7038
    #    target: 80
    #restart: unless-stopped
    tty: true
    volumes:
      - dbadmin_data:/var/lib/pgadmin:rw

  dbadmin2:
    image: adminer
    depends_on:
     - db
    domainname: booking.local
    environment: 
      ADMINER_DEFAULT_SERVER: db001.booking.local
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      #ADMINER_DEFAULT_DB_NAME:
      #ADMINER_DESIGN: galkaev
      ADMINER_DESIGN: nette
    networks:
      - booking_backend
      - booking_frontend
    #restart: always
    #restart: unless-stopped
    #ports:
    #  - published: 7039
    #    target: 8080



networks:
  booking_backend:
    driver: bridge
  booking_frontend:
    driver: bridge

volumes:
  db_data:
  dbadmin_data:
  nuget_data:
  #configdir:
  #  driver: local
  #  driver_opts:
  #    type: 'none'
  #    o: 'bind'
  #    device: '/srv/booking/config'
  